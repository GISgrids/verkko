#############################################################################
 #
 #  This file is part of Verkko, a software program that assembles
 #  whole-genome sequencing reads into telomere-to-telomere
 #  haplotype-resolved chromosomes.
 #
 #  Except as indicated otherwise, this is a 'United States Government
 #  Work', and is released in the public domain.
 #
 #  File 'README.licenses' in the root directory of this distribution
 #  contains full conditions and disclaimers.
 #
 ##

#
#  Rule prepCoverage
#    Generates files used to compute coverage tables.  It combines all the
#    various bits and pieces of the assembly into three outputs.  Which files
#    are combined depends on which stage we're at in the assembly process
#    (and if ONT data is included); getAllMappings() and getAllGraphs()
#    figures this out.
#      5-untip/combined-edges-final.gfa     #  Edges in the graphs
#      5-untip/nodelens-final.txt           #  Sequence lines that have actual sequence
#      5-untip/combined-nodemap-final.txt   #  Maps from nodes to components
#
#  Rule getCoverage
#    Computes {step}.{tech}-coverage.csv based on input graph.
#

rule prepCoverage:
    input:
        graph         = rules.verkko.input.graph
    output:
        edges         = "5-untip/combined-edges-final.gfa",
        lens          = "5-untip/nodelens-final.txt",
        nodes         = "5-untip/combined-nodemap-final.txt"
    log:
        err           = "5-untip/prepCoverage.err"
    params:
        maps          = getAllMappings(6),
        graphs        = getAllGraphs(6),
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 4,
        time_h = 2
    shell:
        '''
cd 5-untip

cat > ./prepCoverage.sh <<EOF
#!/bin/sh
set -e

cat {params.maps} \\\\
> ../{output.nodes}

cat {params.graphs} \\\\
| grep '^L' \\\\
> ../{output.edges}

cat {params.graphs} \\\\
| awk 'BEGIN \\\\
       {{ \\\\
          FS="[ \\t]+"; OFS="\\t"; \\\\
       }} \\\\
       (\$1 == "S") && (\$3 != "*") \\\\
       {{ \\\\
          print \$2, length(\$3); \\\\
       }}' \\\\
> ../{output.lens}
EOF

chmod +x ./prepCoverage.sh

./prepCoverage.sh > ../{log.err} 2>&1
        '''



rule getCoverage:
    input:
        hifi_coverage = rules.buildGraph.output.hificov,
        ont_coverage  = rules.processONT.output.ontcov   if config['withONT'] == "True" else {rules.emptyfile.output},
        graph         = "{dir}/{id}.gfa",
        edges         = rules.prepCoverage.output.edges,
        nodes         = rules.prepCoverage.output.nodes,
        lens          = rules.prepCoverage.output.lens
    output:
        hifi_coverage = "{dir}/{id}.hifi-coverage.csv",
        ont_coverage  = "{dir}/{id}.ont-coverage.csv"
    log:
        err           = "{dir}/{id}.getCoverage.err"
    threads:
        1
    resources:
        job_id = 1,
        n_cpus = 1,
        mem_gb = 16,
        time_h = 2
    shell:
        '''
cd 5-untip

cat > ./getCoverage.{wildcards.id}.sh <<EOF
#!/bin/sh
#set -e

{PYTHON} {VERKKO}/scripts/get_original_coverage.py ../{input.graph} ../{input.nodes} ../{input.edges} ../{input.lens} ../{input.hifi_coverage} > ../{output.hifi_coverage}
{PYTHON} {VERKKO}/scripts/get_original_coverage.py ../{input.graph} ../{input.nodes} ../{input.edges} ../{input.lens} ../{input.ont_coverage}  > ../{output.ont_coverage}
EOF

chmod +x ./getCoverage.{wildcards.id}.sh

./getCoverage.{wildcards.id}.sh > ../{log.err} 2>&1
        '''
